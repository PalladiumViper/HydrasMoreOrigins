
#To use one of them, refer to them elsewhere in script via "value:<value>" e.g. value:example_value
#IMPORTANT NOTE: Be mindful of performance when using these in triggers that are checked often!

# example_value = {
# 	base = 10 #default: 0

# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the other two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	- pow (value is multiplied by itself to the power of x; be careful, you can get overflows if you are not careful)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down)
# 	# 	- abs (multiply by -1 if negative)
# 	# 	- square (multiply by itself)
# 	# 	- square_root

# 	#All mathematical operations except weight and factor can be used inline e.g.
# 	add = 100
# 	multiply = value:some_other_script_value
# 	round = yes
# 	#(Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)

# 	#They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
# 	modifier = {
# 		max = owner.max_example_variable 					#Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	#Only applied if this trigger is true
# 	}
# 	# What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.

# 	complex_trigger_modifier = { 	#This lets you get the value of a trigger that you can't use in one-liners because it uses {}
# 		trigger = count_owned_planet
# 		trigger_scope = owner 		#Lets you get the result of the trigger on a different scope. Default is "this"
# 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
# 			limit = { num_pops > 10 }
# 		}
# 		mode = add 					#Allows all numerical operations
# 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
# 	}
# }

# Final note: script_values use the same metascript system as scripted_triggers and scripted_effects
# This means that you can input parameters into them, in a similar fashion as described in scripted_effects/99_advanced_documentation.txt
# For format for doing so is value:my_value|PARAM1|value1|PARAM2|value2|.
# Then you can use $PARAM1$ in the script value and it will replace it with value1

num_HMO_years_of_early_game = {
	complex_trigger_modifier = {
		trigger = check_galaxy_setup_value
		parameters = {
			setting = mid_game_year
		}
		mode = add
	}
	subtract = 2200
}

#HMO_zombie_sitation_speed_mult = {
#	base = 100
#	divide = value:num_HMO_years_of_early_game
#}

HMO_num_city_districts = {
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_city
		}
		mode = add
	}
}

#HMO_num_industrial_districts = {
#	complex_trigger_modifier = {
#		trigger = num_districts
#		parameters = {
#			type = district_industrial
#		}
#		mode = add
#	}
#}

HMO_num_farming_districts = {
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_farming
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_farming_uncapped
		}
		mode = add
	}
}

HMO_num_mining_districts = {
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_mining
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_mining_uncapped
		}
		mode = add
	}
}

HMO_num_generator_districts = {
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_generator
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_districts
		parameters = {
			type = district_generator_uncapped
		}
		mode = add
	}
}

HMO_isolated_village_chance = {
	base = 10
	complex_trigger_modifier = {
		trigger = count_deposits
		parameters = {
			type = d_HMO_isolated_village
		}
		mode = subtract
	}
}

HMO_min_zombie_armies = {
	base = 0
	add = trigger:years_passed
	factor = 0.25
	min = 2
	max = 20
	round = yes
}

HMO_max_zombie_armies = {
	base = 0
	add = trigger:years_passed
	factor = 0.5
	min = 6
	max = 50
	round = yes
}

HMO_wildworld_blockers_to_clear = {
	base = 0
	add = trigger:situation_progress
	divide = 10
	floor = yes
	subtract = value:HMO_wildworld_cleared_districts
}

HMO_wildworld_cleared_districts = {
	base = 35
	complex_trigger_modifier = {
		trigger = count_deposits
		trigger_scope = target
		parameters = {
			type = HMO_wildworld_unexplored_jungle
		}
		mode = subtract
	}
}

### Search for the bomb | Insurgency ###

HMO_num_enforcers_on_planet = {
	base = 0
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = politician
		}
		mode = add
	}
	modifier = {
		set = 0
		politician_is_planetary_warden = no
	}
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = enforcer
		}
		mode = add
	}
}

HMO_num_scientists_on_planet = {
	base = 0
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = politician
		}
		mode = add
	}
	modifier = {
		set = 0
		NOR = {
			politician_is_science_director = yes
			politician_is_technophant = yes
		}
	}
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = physicist
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = biologist
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = num_assigned_jobs
		parameters = {
			job = engineer
		}
		mode = add
	}
}

HMO_insurgent_strength = {
	base = 100
	add = value:HMO_insurgent_years_impact
	modifier = {
		divide = 2
		owner = {
			has_country_flag = HMO_found_insurgency_weapons
		}
	}
	modifier = {
		divide = 20
		has_planet_flag = HMO_insurgents_has_no_weapons_on_this_planet
	}
	multiply = value:HMO_insurgent_crime_impact
	multiply = value:HMO_insurgent_stability_impact
	multiply = value:HMO_insurgent_happiness_impact
	modifier = {
		multiply = 3
		has_planet_flag = HMO_insurgent_final_invasion_planet
	}
	divide = 200
	ceiling = yes
}

HMO_insurgent_years_impact = {
	base = 1
	add = trigger:years_passed
	multiply = 3
	add = trigger:colony_age_years
	multiply = 100
	square_root = yes
}

# multiply by 66% to 100% (Insurgent strength will be 2/3 if you have no crime, normal insurgent strength if full crime)
HMO_insurgent_crime_impact = {
	base = 200
	add = trigger:planet_crime
	divide = 300
}

# Multiply by 100% to 200% (Double insurgent strength if stability is 0)
HMO_insurgent_stability_impact = {
	base = 200
	subtract = trigger:planet_stability
	divide = 100
}

# Multiply by 1 - 11 depending on happiness, with 0 happiness giving insurgents 11 times normal strength
HMO_insurgent_happiness_impact = {
	base = 110
	subtract = trigger:happiness_planet
	divide = 10
}

HMO_20_percent_of_pop_group = {
	base = 0
	set = trigger:pop_group_size
	divide = 5
	ceiling = yes
}

HMO_35_percent_of_available_housing = {
	base = 0
	set = trigger:free_housing
	divide = 100
	multiply = 35
	min = 100
}